"""Initial migration

Revision ID: 4f6184fe091a
Revises: 327254eee725
Create Date: 2025-07-02 18:17:29.451663

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4f6184fe091a'
down_revision: Union[str, Sequence[str], None] = '327254eee725'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Cast quotations.user_id from VARCHAR to UUID
    op.execute(
        "ALTER TABLE quotations ALTER COLUMN user_id TYPE UUID USING user_id::uuid;"
    )
    # Drop old constraint if it exists
    op.drop_constraint("fk_quotations_user_id_users", "quotations", type_="foreignkey")
    # Recreate foreign key with correct types
    op.create_foreign_key(
        "fk_quotations_user_id_users",
        "quotations",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE"
    )

def downgrade() -> None:
    # Cast back to VARCHAR (if required)
    op.execute(
        "ALTER TABLE quotations ALTER COLUMN user_id TYPE VARCHAR USING user_id::text;"
    )
    op.drop_constraint("fk_quotations_user_id_users", "quotations", type_="foreignkey")
    op.create_foreign_key(
        "fk_quotations_user_id_users",
        "quotations",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE"
    )


# def upgrade() -> None:
#     """Upgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('quotations', 'user_id',
#                existing_type=sa.UUID(),
#                type_=sa.String(),
#                existing_nullable=False)
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     """Downgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('quotations', 'user_id',
#                existing_type=sa.String(),
#                type_=sa.UUID(),
#                existing_nullable=False)
#     # ### end Alembic commands ###
